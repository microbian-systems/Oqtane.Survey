@using Oqtane.Modules.Controls
@using Oqtane.Survey.Services
@using Oqtane.Survey.Models

@namespace Oqtane.Survey
@inherits ModuleBase

@inject ISurveyService SurveyService
@inject ISurveyItemService SurveyItemService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-12">
        <ActionLink Action="EditSurveyItem" Security="SecurityAccessLevel.Edit" IconName="plus" IconOnly="true"
                    Parameters="@($"id=-1")"
                    Text="New Survey Item" />
        <ActionLink Action="EditSurvey" Security="SecurityAccessLevel.Edit" IconName="pencil" IconOnly="true"
                    Text="Edit Survey" />
        &nbsp;<label> @Survey.SurveyName</label>
    </div>
</div>
<br />
<div>
    @foreach (var SurveyItem in Survey.SurveyItem.OrderBy(x => x.Position))
    {
        <div class="row">
            <div class="col-md-3" style="text-align:right">
                @if (SurveyItem.Position > 1)
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                  Size="Radzen.ButtonSize.Medium"
                                  Icon="arrow_circle_up"
                                  Style="margin-top: 20px"
                                  Click="@(args => SelectedSurveyMoveUp(SurveyItem))" />
                }
                @if (SurveyItem.Position < Survey.SurveyItem.Count())
                {
                    <RadzenButton ButtonStyle="ButtonStyle.Light"
                                  Size="Radzen.ButtonSize.Medium"
                                  Icon="arrow_circle_down"
                                  Style="margin-top: 20px"
                                  Click="@(args => SelectedSurveyMoveDown(SurveyItem))" />
                }
                <ActionLink Action="EditSurveyItem" Security="SecurityAccessLevel.Edit" IconName="pencil" IconOnly="true"
                            Parameters="@($"id={SurveyItem.Id}")"
                            Text="Edit Survey Item" />
            </div>
            <div class="col-md-9" style="text-align: left;margin-bottom: 20px">
                <b>@SurveyItem.ItemLabel</b>
                <br />
                @if (SurveyItem.ItemType == "Text Box")
                {
                    <RadzenTextBox MaxLength="4000" />
                }
                @if (SurveyItem.ItemType == "Text Area")
                {
                    <RadzenTextArea MaxLength="4000" />
                }
                @if (SurveyItem.ItemType == "Date")
                {
                    <RadzenDatePicker DateFormat="d" TValue="DateTime?" ShowTime="false" />
                }
                @if (SurveyItem.ItemType == "Date Time")
                {
                    <RadzenDatePicker TValue="DateTime?" ShowTime="true" />
                }
                @if ((SurveyItem.ItemType == "Multi-Select Dropdown") || (SurveyItem.ItemType == "Dropdown"))
                {
                    <select class="form-control" style="width:250px;">
                        <option>Select...</option>
                        @foreach (var option in SurveyItem.SurveyItemOption.OrderBy(x => x.Id))
                        {
                            <option>@option.OptionLabel</option>
                            }
                    </select>
                }
            </div>
        </div>
    }
</div>
@if (Survey.SurveyItem.Count == 0)
{
    <h4>No Survey Items</h4>
    <br />
}
<br />
<button type="button" class="btn btn-success" @onclick="Save">Save</button>
@if (Survey.SurveyId > 0)
{
    <ActionDialog Header="Delete Survey"
                  Message="@("Are You Sure You Wish To Delete The Survey?")"
                  Action="Delete" Security="SecurityAccessLevel.Edit"
                  Class="btn btn-danger"
                  OnClick="@(async () => await DeleteSurvey())" />
}
<NavLink class="btn btn-secondary" href="@NavigateUrl()">Cancel</NavLink>
<br />
<br />

@code {
    #region Control Definition
    // This control can only be reached by users with Edit permission
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    // This control responds to the Add or Edit ActionLink commands
    public override string Actions => "Add,Edit";

    // Title for the control
    public override string Title => "Manage Survey";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/Radzen.Blazor/css/default.css" },
        new Resource { ResourceType = ResourceType.Script, Url = "_content/Radzen.Blazor/Radzen.Blazor.js" }
    };
    #endregion

    Survey Survey = new Survey() { SurveyItem = new List<SurveyItem>() };
    public SurveyItem Answer = new SurveyItem();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            // Must create a Survey, in the database,
            // if one does not already exist
            if (Survey == null)
            {
                Survey = new Survey();
                Survey.SurveyId = -1;
                Survey.ModuleId = ModuleState.ModuleId;
                Survey.SurveyName = "New Survey";

                Survey = await SurveyService.AddSurveyAsync(Survey);
                await logger.LogInformation("Survey Added {Survey}", Survey);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Survey for {ModuleState.ModuleId} {Error}", ModuleState.ModuleId, ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    async Task SelectedSurveyMoveUp(object value)
    {
        SurveyItem objSurveyItem = (SurveyItem)value;
        objSurveyItem.ModuleId = ModuleState.ModuleId;

        await SurveyItemService.MoveSurveyItemAsync("Up", objSurveyItem);
        await logger.LogInformation("Survey Item moved up {SurveyItem}", objSurveyItem);

        // Refresh Survey
        Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);
    }

    async Task SelectedSurveyMoveDown(object value)
    {
        SurveyItem objSurveyItem = (SurveyItem)value;
        objSurveyItem.ModuleId = ModuleState.ModuleId;

        await SurveyItemService.MoveSurveyItemAsync("Down", objSurveyItem);
        await logger.LogInformation("Survey Item moved down {SurveyItem}", objSurveyItem);

        // Refresh Survey
        Survey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);
    }

    #region private async Task Save()
    private async Task Save()
    {
        try
        {
            Survey SaveSurvey = await SurveyService.GetSurveyAsync(ModuleState.ModuleId);

            if (SaveSurvey == null)
            {
                SaveSurvey = new Survey();
                SaveSurvey.ModuleId = ModuleState.ModuleId;
                SaveSurvey.SurveyName = Survey.SurveyName;
                SaveSurvey = await SurveyService.AddSurveyAsync(SaveSurvey);
                await logger.LogInformation("Survey Added {Survey}", SaveSurvey);
            }
            else
            {
                SaveSurvey.SurveyName = Survey.SurveyName;
                await SurveyService.UpdateSurveyAsync(SaveSurvey);
                await logger.LogInformation("Survey Updated {Survey}", SaveSurvey);
            }

            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Survey {Error}", ex.Message);
            AddModuleMessage("Error Saving Survey", MessageType.Error);
        }
    }
    #endregion

    #region private async Task DeleteSurvey()
    private async Task DeleteSurvey()
    {
        try
        {
            await SurveyService.DeleteSurveyAsync(ModuleState.ModuleId);
            await logger.LogInformation("Survey Deleted {Survey}", Survey);
            NavigationManager.NavigateTo(NavigateUrl());
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Survey {Survey} {Error}", Survey, ex.Message);
            AddModuleMessage("Error Deleting Survey", MessageType.Error);
        }
    }
    #endregion
}
