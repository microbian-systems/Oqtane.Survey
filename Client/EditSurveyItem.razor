@namespace Oqtane.Survey
@inherits ModuleBase

@using System.Linq;
@using Oqtane.Modules.Controls
@using Oqtane.Survey.Services
@using Oqtane.Survey.Models
@using System.Linq.Dynamic.Core

@inject ISurveyItemService SurveyItemService
@inject NavigationManager NavigationManager

@strError
<RadzenCard Style="margin-bottom: 20px;">
    <div class="row">
        <div class="col-md-12">
            <div><b>Name</b></div>
            <RadzenTextBox @bind-Value="SelectedSurveyItem.ItemLabel"
                           Style="width: 400px" />
            <br />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-6">
            <div><b>Type</b></div>
            <select @bind="SurveyTypeValue" class="form-control" style="width:250px;">
                <option Value="1">Text Box</option>
                <option Value="2">Text Area</option>
                <option Value="3">Date</option>
                <option Value="4">Date Time</option>
                <option Value="5">Dropdown</option>
                <option Value="6">Multi-Select Dropdown</option>
            </select>
        </div>
        <div class="col-md-6">
            <div><b>Required</b></div>
            <RadzenCheckBox @bind-Value="boolRequired"
                            Style="margin-bottom: 20px" TValue="bool" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-12">
            @if ((SurveyTypeValue == 5) || (SurveyTypeValue == 6))
            {
                <RadzenButton Click="OpenPopup"
                              Text="Edit Options"
                              Size="Radzen.ButtonSize.Small"
                              ButtonStyle="ButtonStyle.Info" />
            }
        </div>
    </div>
</RadzenCard>
<RadzenButton Click="UpdateSurveyItem"
              Text="Save" ButtonStyle="ButtonStyle.Success"
              Style="margin-bottom: 10px; width: 150px" />
<RadzenButton Click="Cancel"
              Text="Cancel" ButtonStyle="ButtonStyle.Light"
              Style="margin-bottom: 10px; width: 150px" />
@if (SelectedSurveyItem != null)
{
    @if (SelectedSurveyItem.Id > 0)
    {
        <ActionDialog Header="Delete Item"
                      Message="@("Are You Sure You Wish To Delete The Survey Item?")"
                      Action="Delete" Security="SecurityAccessLevel.Edit"
                      Class="btn btn-danger"
                      OnClick="@(async () => await DeleteSurveyItem())" />
    }

    @if (ShowPopup)
    {
        <div class="modal" tabindex="-1" style="display:block;background-color:gainsboro" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Edit Options</h3>
                    </div>
                    <div class="modal-body">
                        <ul style="list-style-type:none;">
                            @foreach (var option in SelectedSurveyItem.SurveyItemOption.OrderBy(x => x.Id))
                            {
                                <li>
                                    <div Style="margin-bottom: 10px; width: 150px">
                                        <RadzenButton Click="(() => RemoveOption(option))"
                                                      Icon="delete"
                                                      Size="Radzen.ButtonSize.Small"
                                                      ButtonStyle="ButtonStyle.Danger" />
                                        <b>@option.OptionLabel</b>
                                    </div>
                                </li>
                            }
                        </ul>
                        <RadzenTextBox @bind-Value="newOption"
                                       Style="width: 200px" />
                        <RadzenButton Click="AddOption"
                                      Text="Add"
                                      Size="Radzen.ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Success" />
                        <RadzenButton Click="ClosePopup"
                                      Text="Close"
                                      Size="Radzen.ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Secondary" />
                    </div>
                </div>
            </div>
        </div>
    }
}
@code {
    #region Control Definition
    // This control can only be reached by users with Edit permission
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    // This control responds to the Add or Edit ActionLink commands
    public override string Actions => "EditSurveyItem";

    // Title for the control
    public override string Title => "Edit Survey Item";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = "_content/Radzen.Blazor/css/default-base.css" },
        new Resource { ResourceType = ResourceType.Script, Url = "_content/Radzen.Blazor/Radzen.Blazor.js" }
    };
    #endregion

    SurveyItem SelectedSurveyItem = new SurveyItem() { Id = -1, Required = 1, SurveyItemOption = new List<SurveyItemOption>() };

    int _id;
    string strError = "";
    bool ShowPopup = false;
    bool boolRequired = false;

    private string newOption;
    int SurveyTypeValue = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.QueryString.ContainsKey("id"))
            {
                _id = Int32.Parse(PageState.QueryString["id"]);

                if (_id > -1)
                {
                    SelectedSurveyItem = await SurveyItemService.GetSurveyItemAsync(_id);

                    boolRequired = (SelectedSurveyItem.Required == 1);

                    switch (SelectedSurveyItem.ItemType)
                    {
                        case "Text Box":
                            SurveyTypeValue = 1;
                            break;
                        case "Text Area":
                            SurveyTypeValue = 2;
                            break;
                        case "Date":
                            SurveyTypeValue = 3;
                            break;
                        case "Date Time":
                            SurveyTypeValue = 4;
                            break;
                        case "Dropdown":
                            SurveyTypeValue = 5;
                            break;
                        case "Multi-Select Dropdown":
                            SurveyTypeValue = 6;
                            break;
                        default:
                            SurveyTypeValue = 1;
                            break;
                    }

                    if (SelectedSurveyItem == null)
                    {
                        AddModuleMessage("Error Loading Survey", MessageType.Error);
                    }
                }
                else
                {
                    SelectedSurveyItem.ModuleId = ModuleState.ModuleId;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Survey Item {_id} {Error}", _id, ex.Message);
            AddModuleMessage("Error Loading Survey", MessageType.Error);
        }
    }

    protected override void OnParametersSet()
    {
        boolRequired = (SelectedSurveyItem.Required == 1);
    }

    async Task UpdateSurveyItem()
    {
        try
        {
            if (boolRequired)
            {
                SelectedSurveyItem.Required = 1;
            }
            else
            {
                SelectedSurveyItem.Required = 0;
            }

            switch (SurveyTypeValue)
            {
                case 1:
                    SelectedSurveyItem.ItemType = "Text Box";
                    break;
                case 2:
                    SelectedSurveyItem.ItemType = "Text Area";
                    break;
                case 3:
                    SelectedSurveyItem.ItemType = "Date";
                    break;
                case 4:
                    SelectedSurveyItem.ItemType = "Date Time";
                    break;
                case 5:
                    SelectedSurveyItem.ItemType = "Dropdown";
                    break;
                case 6:
                    SelectedSurveyItem.ItemType = "Multi-Select Dropdown";
                    break;
                default:
                    SelectedSurveyItem.ItemType = "Text Box";
                    break;
            }

            if (SelectedSurveyItem.Id == -1)
            {
                await SurveyItemService.AddSurveyItemAsync(SelectedSurveyItem);
                await logger.LogInformation("Survey Item Added {SurveyItem}", SelectedSurveyItem);
            }
            else
            {
                await SurveyItemService.UpdateSurveyItemAsync(SelectedSurveyItem);
                await logger.LogInformation("Survey Item Updated {SurveyItem}", SelectedSurveyItem);
            }

            // Get URL for Edit control
            string strEditURL = EditUrl("Edit");
            NavigationManager.NavigateTo(strEditURL);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error in UpdateSurveyItem {Error}", ex.Message);
        }
    }

    void OpenPopup()
    {
        // Open Popup
        ShowPopup = true;
    }

    void ClosePopup()
    {
        // Close Popup
        ShowPopup = false;
    }

    private void AddOption()
    {
        if (!string.IsNullOrWhiteSpace(newOption))
        {
            SelectedSurveyItem.SurveyItemOption
                .Add(new SurveyItemOption { OptionLabel = newOption });

            newOption = string.Empty;
        }
    }

    private void RemoveOption(SurveyItemOption paramSurveyItemOption)
    {
        // Remove the option from the collection
        SelectedSurveyItem.SurveyItemOption.Remove(paramSurveyItemOption);
    }

    async Task DeleteSurveyItem()
    {
        await SurveyItemService.DeleteSurveyItemAsync(SelectedSurveyItem);
        await logger.LogInformation("Survey Item Deleted {SurveyItem}", SelectedSurveyItem);

        // Get URL for Edit control
        string strEditURL = EditUrl("Edit");
        NavigationManager.NavigateTo(strEditURL);
    }

    void Cancel()
    {
        // Get URL for Edit control
        string strEditURL = EditUrl("Edit");
        NavigationManager.NavigateTo(strEditURL);
    }
}